# Use Dockerized infrastructure
sudo: false

# Use node_js environnement
language: node_js
node_js:
  - "6"

# Cache Gcloud SDK between commands
cache:
  yarn: true
  directories:
  - "$HOME/google-cloud-sdk/"

env:
  global:


install:
  - npm install

script:
  - npm test

before_deploy:
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - gcloud --quiet version
  - gcloud --quiet components update

  # use the decrypted service account credentials to authenticate the command line tool
  # get the encrypted variable names from travis cli: https://docs.travis-ci.com/user/encrypting-files/
  - openssl aes-256-cbc -K $TRAVIS_ENCRYPTED_key -iv $TRAVIS_ENCRYPTED_iv -in gcloud-service-key.json.enc -out gcloud-service-key.json -d
  - gcloud auth activate-service-account --key-file gcloud-service-key.json

  - gcloud config set project PROJECT

deploy:
  - provider: script
    script:
      # change PROJECT and REPO to the values from the cloud console: https://console.cloud.google.com/code/develop
      - gcloud --quiet beta functions deploy mailer --source-url https://source.developers.google.com/p/PROJECT/r/REPO --source-path / --trigger-http
    skip_cleanup: true
    on:
      branch: master
      
# deploy:
#   provider: gae
#   keyfile: ...
#   project: continuous-deployment-demo
#   By default, Travis will only deploy from your master branch.You can also explicitly specify the branch to deploy from with the on option:
#   on:
#     all_branches: true
#   on: production

#   By default, when your application is deployed it will be promoted to receive all traffic. You can disable that using the no_promote option
#   no_promote: true

#   in a future Cloud SDK release, deployments that promote the new version to receive all traffic will stop the previous version by default
#   no_stop_previous_version: true

# #   skip_cleanup: true

# Other Available Configuration Options #
# project: Project ID used to identify the project on Google Cloud.
# keyfile: Path to the JSON file containing your Service Account credentials in JSON Web Token format. To be obtained via the Google Developers Console. Defaults to "service-account.json". Note that this file should be handled with care as it contains authorization keys.
# config: Path to your module configuration file. Defaults to "app.yaml". This file is runtime dependent (Go, Java, PHP, Python)
# version: The version of the app that will be created or replaced by this deployment. If you do not specify a version, one will be generated for you. See gcloud app deploy
# default: Flag to set the deployed version to be the default serving version. See gcloud app deploy
# verbosity: Lets you adjust the verbosity when invoking "gcloud". Defaults to "warning". See gcloud.
# docker_build: If deploying a Managed VM, specifies where to build your image. Typical values are "remote" to build on Google Cloud Engine and "local" which requires Docker to be set up properly (to utilize this on Travis CI, read Using Docker on Travis CI). Defaults to "remote".
